//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace POCO
{
    public partial class Topic
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Nom
        {
            get;
            set;
        }
    
        public virtual System.DateTime DateCreation
        {
            get;
            set;
        }
    
        public virtual int CreateurId
        {
            get;
            set;
        }
    
        public virtual string Contenu
        {
            get;
            set;
        }
    
        public virtual int CategorieId
        {
            get { return _categorieId; }
            set
            {
                if (_categorieId != value)
                {
                    if (Categorie != null && Categorie.Id != value)
                    {
                        Categorie = null;
                    }
                    _categorieId = value;
                }
            }
        }
        private int _categorieId;

        #endregion
        #region Navigation Properties
    
        public virtual Categorie Categorie
        {
            get { return _categorie; }
            set
            {
                if (!ReferenceEquals(_categorie, value))
                {
                    var previousValue = _categorie;
                    _categorie = value;
                    FixupCategorie(previousValue);
                }
            }
        }
        private Categorie _categorie;
    
        public virtual ICollection<Message> Messages
        {
            get
            {
                if (_messages == null)
                {
                    var newCollection = new FixupCollection<Message>();
                    newCollection.CollectionChanged += FixupMessages;
                    _messages = newCollection;
                }
                return _messages;
            }
            set
            {
                if (!ReferenceEquals(_messages, value))
                {
                    var previousValue = _messages as FixupCollection<Message>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMessages;
                    }
                    _messages = value;
                    var newValue = value as FixupCollection<Message>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMessages;
                    }
                }
            }
        }
        private ICollection<Message> _messages;

        #endregion
        #region Association Fixup
    
        private void FixupCategorie(Categorie previousValue)
        {
            if (previousValue != null && previousValue.Topics.Contains(this))
            {
                previousValue.Topics.Remove(this);
            }
    
            if (Categorie != null)
            {
                if (!Categorie.Topics.Contains(this))
                {
                    Categorie.Topics.Add(this);
                }
                if (CategorieId != Categorie.Id)
                {
                    CategorieId = Categorie.Id;
                }
            }
        }
    
        private void FixupMessages(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Message item in e.NewItems)
                {
                    item.Topic = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Message item in e.OldItems)
                {
                    if (ReferenceEquals(item.Topic, this))
                    {
                        item.Topic = null;
                    }
                }
            }
        }

        #endregion
    }
}
