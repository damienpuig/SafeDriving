//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace POCO
{
    public partial class Article
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual int EmployeId
        {
            get { return _employeId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_employeId != value)
                    {
                        if (Employe != null && Employe.Id != value)
                        {
                            Employe = null;
                        }
                        _employeId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _employeId;
    
        public virtual string Titre
        {
            get;
            set;
        }
    
        public virtual System.DateTime Date
        {
            get;
            set;
        }
    
        public virtual string Contenu
        {
            get;
            set;
        }
    
        public virtual byte[] Photo
        {
            get;
            set;
        }
    
        public virtual Nullable<int> TypeArticleId
        {
            get { return _typeArticleId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_typeArticleId != value)
                    {
                        if (TypeArticle != null && TypeArticle.Id != value)
                        {
                            TypeArticle = null;
                        }
                        _typeArticleId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _typeArticleId;

        #endregion
        #region Navigation Properties
    
        public virtual Employe Employe
        {
            get { return _employe; }
            set
            {
                if (!ReferenceEquals(_employe, value))
                {
                    var previousValue = _employe;
                    _employe = value;
                    FixupEmploye(previousValue);
                }
            }
        }
        private Employe _employe;
    
        public virtual TypeArticle TypeArticle
        {
            get { return _typeArticle; }
            set
            {
                if (!ReferenceEquals(_typeArticle, value))
                {
                    var previousValue = _typeArticle;
                    _typeArticle = value;
                    FixupTypeArticle(previousValue);
                }
            }
        }
        private TypeArticle _typeArticle;
    
        public virtual ICollection<Employe> Utilisateurs_Employe
        {
            get
            {
                if (_utilisateurs_Employe == null)
                {
                    var newCollection = new FixupCollection<Employe>();
                    newCollection.CollectionChanged += FixupUtilisateurs_Employe;
                    _utilisateurs_Employe = newCollection;
                }
                return _utilisateurs_Employe;
            }
            set
            {
                if (!ReferenceEquals(_utilisateurs_Employe, value))
                {
                    var previousValue = _utilisateurs_Employe as FixupCollection<Employe>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupUtilisateurs_Employe;
                    }
                    _utilisateurs_Employe = value;
                    var newValue = value as FixupCollection<Employe>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupUtilisateurs_Employe;
                    }
                }
            }
        }
        private ICollection<Employe> _utilisateurs_Employe;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupEmploye(Employe previousValue)
        {
            if (previousValue != null && previousValue.Articles.Contains(this))
            {
                previousValue.Articles.Remove(this);
            }
    
            if (Employe != null)
            {
                if (!Employe.Articles.Contains(this))
                {
                    Employe.Articles.Add(this);
                }
                if (EmployeId != Employe.Id)
                {
                    EmployeId = Employe.Id;
                }
            }
        }
    
        private void FixupTypeArticle(TypeArticle previousValue)
        {
            if (previousValue != null && previousValue.Articles.Contains(this))
            {
                previousValue.Articles.Remove(this);
            }
    
            if (TypeArticle != null)
            {
                if (!TypeArticle.Articles.Contains(this))
                {
                    TypeArticle.Articles.Add(this);
                }
                if (TypeArticleId != TypeArticle.Id)
                {
                    TypeArticleId = TypeArticle.Id;
                }
            }
            else if (!_settingFK)
            {
                TypeArticleId = null;
            }
        }
    
        private void FixupUtilisateurs_Employe(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Employe item in e.NewItems)
                {
                    if (!item.Articles_1.Contains(this))
                    {
                        item.Articles_1.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Employe item in e.OldItems)
                {
                    if (item.Articles_1.Contains(this))
                    {
                        item.Articles_1.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
